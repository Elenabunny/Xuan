Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.
Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        // sort nums and put lookup[i] 
        if (nums.size() < 3) {
            return ans;
        }
        sort(nums.begin(), nums.end());
        int left;
        int right;
        for(int i=0; i<nums.size()-2; i++){
            if (i>0 && nums[i] == nums[i-1]){
                continue;
            }
            left = i+1;
            right = nums.size()-1;
            while(left < right){
                if (nums[left] + nums[right] > -nums[i]){
                    right--;
                }
                else if (nums[left] + nums[right] < -nums[i]){
                    left++; 
                }
                else {
                    ans.push_back({nums[i],nums[left],nums[right]});
                    do {
                        left++;
                    } while (nums[left] == nums[left-1] && left<right);
                }    
            }
        }
        return ans;
    }  
                        
};                             
